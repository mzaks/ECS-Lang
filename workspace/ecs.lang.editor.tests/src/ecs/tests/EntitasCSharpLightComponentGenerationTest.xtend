/*
 * generated by Xtext 2.10.0
 */
package ecs.tests

import com.google.inject.Inject
import ecs.lang.Project
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import ecs.generator.EntitasCSharpLightGenerator
import org.junit.Before

@RunWith(XtextRunner)
@InjectWith(LangInjectorProvider)
class EntitasCSharpLightComponentGenerationTest{

	@Inject
	ParseHelper<Project> parseHelper
	
	EntitasCSharpLightGenerator generator
	
	@Before
	def void setup(){
		generator = new EntitasCSharpLightGenerator()
	}

	@Test 
	def void generateSimpleFlagComponent() {
		val project = parseHelper.parse('''
			platform bla
			comp A
		''')
		Assert.assertNotNull(project)
		generator.setupModels(newHashSet(project))
		val components = generator.collectAllComponents()
		
		val componentDefinition = generator.generate(components.get(0), null)
		
		Assert.assertEquals('''
		using Entitas;
		public partial class AComponent : IComponent {
		}
		
		namespace Entitas {
			public partial class Entity {
				static readonly AComponent aComponent = new AComponent();
		
				public bool isA {
					get { return HasComponent(ComponentIds.A); }
					set {
						if (value != isA) {
							if (value) {
								AddComponent(ComponentIds.A, aComponent);
							} else {
								RemoveComponent(ComponentIds.A);
							}
						}
					}
				}
				
				public Entity IsA(bool value) {
					isA = value;
					return this;
				}
			}
			public partial class Matcher {
				static IMatcher _matcherA;
			
				public static IMatcher A {
					get {
						if (_matcherA == null) {
							var matcher = (Matcher)Matcher.AllOf(ComponentIds.A);
							matcher.componentNames = ComponentIds.componentNames;
							_matcherA = matcher;
						}
		
						return _matcherA;
					}
				}
			}
		}
		'''.toString, componentDefinition.toString)
	}
	
	@Test 
	def void generateSimpleFlagComponentInContext() {
		val project = parseHelper.parse('''
			platform bla
			ctx C1
			comp[C1] A
		''')
		Assert.assertNotNull(project)
		generator.setupModels(newHashSet(project))
		val components = generator.collectAllComponents()
		
		val componentDefinition = generator.generate(components.get(0), null)
		
		Assert.assertEquals('''
		using Entitas;
		public partial class AComponent : IComponent {
		}
		
		namespace Entitas {
			public partial class Entity {
				static readonly AComponent aComponent = new AComponent();
		
				public bool isA {
					get { return HasComponent(C1ComponentIds.A); }
					set {
						if (value != isA) {
							if (value) {
								AddComponent(C1ComponentIds.A, aComponent);
							} else {
								RemoveComponent(C1ComponentIds.A);
							}
						}
					}
				}
				
				public Entity IsA(bool value) {
					isA = value;
					return this;
				}
			}
		}
		public partial class C1Matcher {
			static IMatcher _matcherA;
		
			public static IMatcher A {
				get {
					if (_matcherA == null) {
						var matcher = (Matcher)Matcher.AllOf(C1ComponentIds.A);
						matcher.componentNames = C1ComponentIds.componentNames;
						_matcherA = matcher;
					}
		
					return _matcherA;
				}
			}
		}
		'''.toString, componentDefinition.toString)
	}
	
	@Test 
	def void generateSimpleFlagComponentInMultipleContext() {
		val project = parseHelper.parse('''
			platform bla
			ctx C1, C2
			comp[C1, C2] A
		''')
		Assert.assertNotNull(project)
		generator.setupModels(newHashSet(project))
		val components = generator.collectAllComponents()
		
		val componentDefinition = generator.generate(components.get(0), null)
		
		Assert.assertEquals('''
		using Entitas;
		public partial class AComponent : IComponent {
		}
		
		namespace Entitas {
			public partial class Entity {
				static readonly AComponent aComponent = new AComponent();
		
				public bool isA {
					get { return HasComponent(C1ComponentIds.A); }
					set {
						if (value != isA) {
							if (value) {
								AddComponent(C1ComponentIds.A, aComponent);
							} else {
								RemoveComponent(C1ComponentIds.A);
							}
						}
					}
				}
				
				public Entity IsA(bool value) {
					isA = value;
					return this;
				}
			}
		}
		public partial class C1Matcher {
			static IMatcher _matcherA;
		
			public static IMatcher A {
				get {
					if (_matcherA == null) {
						var matcher = (Matcher)Matcher.AllOf(C1ComponentIds.A);
						matcher.componentNames = C1ComponentIds.componentNames;
						_matcherA = matcher;
					}
		
					return _matcherA;
				}
			}
		}
		public partial class C2Matcher {
			static IMatcher _matcherA;
		
			public static IMatcher A {
				get {
					if (_matcherA == null) {
						var matcher = (Matcher)Matcher.AllOf(C1ComponentIds.A);
						matcher.componentNames = C2ComponentIds.componentNames;
						_matcherA = matcher;
					}
		
					return _matcherA;
				}
			}
		}
		'''.toString, componentDefinition.toString)
	}
}
