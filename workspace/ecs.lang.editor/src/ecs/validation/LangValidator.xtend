/*
 * generated by Xtext 2.10.0
 */
package ecs.validation

import org.eclipse.xtext.validation.Check
import ecs.lang.ContextDefinition
import ecs.lang.Component
import ecs.lang.ParentSystem
import ecs.lang.Alias
import ecs.lang.System
import ecs.lang.AComponent
import ecs.lang.LangPackage
import ecs.lang.Project
import ecs.lang.PlatformID
import ecs.generator.LangGenerator

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class LangValidator extends AbstractLangValidator {
	
	public static val VALID_COMPONENT_NEEDED = 'validComponentNeeded'
	public static val COMPONENT_NOT_IN_CONTEXT = 'componentNotInContext'
	public static val PLATFORM_NOT_SUPPORTED = 'platformNotSupported'
	
	@Check
	def checkContextDefinitionsToContainComponentsOnly(ContextDefinition ctx){
		for (pair : ctx.components.indexed){
			if (!pair.value.validComponent()){
				error('This is not a valid component', 
					LangPackage.Literals.CONTEXT_DEFINITION__COMPONENTS,
					pair.key,
					VALID_COMPONENT_NEEDED)
			}
		}
	}
	
	@Check
	def checkComponentIsNotInContext(AComponent component){
		if (!component.validComponent){
			return
		}
		val project = component.eResource.contents.filter(typeof(Project)).get(0) as Project
		if (project.contextDefinitions.isNullOrEmpty){
			return
		}
		for (ctx : project.contextDefinitions){
			if (ctx.components.contains(component)){
				return
			}
		}
		error('This component is not assigned to a context',
					LangPackage.Literals.ACOMPONENT__NAME,
					COMPONENT_NOT_IN_CONTEXT)
	}
	
	@Check
	def checkplatformSupport(PlatformID platformId){
		if (LangGenerator.generators.get(platformId.name) == null){
			error('There is no code generator for this platform',
					LangPackage.Literals.PLATFORM_ID__NAME,
					PLATFORM_NOT_SUPPORTED)
		}
	}
	
	def boolean validComponent(AComponent component){
		switch component {
			Component case component: return true 
			System case component: return component.componentAlias
			ParentSystem case component: return component.componentAlias
			Alias case component : return component.componentAlias
			}
		return false
	}
	
}
