/*
 * generated by Xtext 2.10.0
 */
package ecs.generator

import ecs.lang.Project
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.impl.ResourceDescriptionsProvider
import com.google.inject.Inject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LangGenerator extends AbstractGenerator {

	@Inject
  	private ResourceDescriptionsProvider resourceDescriptionsProvider
  	
  	public static val generators = newLinkedHashMap(
		"entitas_csharp" -> new EntitasCSharpGenerator(),
		"entitas_csharp_light" -> new EntitasCSharpLightGenerator()
	)

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val index = resourceDescriptionsProvider.createResourceDescriptions
		val projects = <Project>newHashSet()
		for (desc : index.allResourceDescriptions){
			val res = resource.resourceSet.getResource(desc.URI, true)
			res.contents.forEach[projects.add(it as Project)]
		}
		val generatorIds = <String>newHashSet()
		for (project : projects){
			if (project.platformDefinition != null){
				generatorIds.addAll(project.platformDefinition.ids.map[name])			
			}
		}
		for (generatorId : generatorIds){
			val generator = generators.get(generatorId)
			if (generator != null) {
				(generator as ILangGenerator).generate(projects, resource, fsa, context)
			}
		}
	}
}
