grammar ecs.Lang with org.eclipse.xtext.common.Terminals

generate lang "http://www.Lang.ecs"

Project:
	platformDefinition = Platforms?
	namespace = Namespace?
	contextDefinition = ContextDefinition?
	typeAliases += Alias*
	
	components += Component*
	
	procedures += Procedure*
	observers += Observer*
	systems += System*
	chains += Chain*
	
;

ContextDefinition:
	'ctx' (names += ContextName ','?)+
;

ContextName:
	name = ValidID
;

ContextReference:
	'[' (context+=[ContextName] ','?)+ ']'
;

Platforms:
	'platform' (ids += PlatformID ','?)+
;

PlatformID:
	name = ValidID
;

Namespace:
	"namespace" name=QualifiedName
;

Alias:
	'alias' (componentAlias ?= 'comp' (contextRef = ContextReference)? (unique ?= 'unique')? )? name = ValidID (listOfAliases = AliasList | singleAlias = SingleAlias)
;

SingleAlias:
	'=' typeAlias = STRING size=INT?
;

AliasList:
	'{' rules += AliasRule+ '}'
;

AliasRule:
	platform = [PlatformID] ':' typeAlias = STRING (size=INT variableSize?='*'?)?
;

AComponent:
	Component | Alias | System | Chain
;

Component:
	'comp' (contextRef = ContextReference)? (unique ?= 'unique')? name = ValidID (( (':' valueType = [Alias] (index?='asIndexKey'|multiIndex?='asMultiIndexKey')? )? | ('{' (properties += ComponentProperty ','?)+ '}')) | '/' prefix = STRING)
;

ComponentProperty:
	name = ValidID ':' type = [Alias]
;

System:
	'sys' (componentAlias ?= 'comp' (contextRef = ContextReference)? (unique ?= 'unique')? )? (init ?= 'init')? (cleanup ?= 'cleanup')? (teardown ?= 'teardown')? name = ValidID '{'
		input = Input?
		(uniqueComp += UniqueComponentAccess)*
		(groups += Group)*
		(index += Index)*
		(createRules += CreateRule)*
	'}'
;

Input:
	'input' unqiue ?= 'unique'? '{'
		'trigger' ':' (triggers += InputTrigger ','?)+
		 ('ensure' ':' (ensureComponents += [AComponent] ','?)+)?
		 ('exclude' ':' (excludeComponents += [AComponent] ','?)+)?
		 ('api' ':' (apiRules += ApiRule ','?)+ )?
		 (destroy ?= 'destroy')?
	'}' ('@' contextRef = [ContextName])?
;

InputTrigger:
	'enteredGroup' '(' (enterComponents += [AComponent]','?)+ ')' |
	'leftGroup' '(' (left += [AComponent]','?)+ ')' |
	'enteredOrLeftGroup' '(' (enteredOrLeft += [AComponent]','?)+ ')'	
;

CreateRule:
	'create' name = ValidID ':' (componentTypes += [AComponent]','?)+ ('@' contextRef = [ContextName])?
;

Index:
	'index' name = ValidID '{'
		'key' ':' componentRef=[Component]
		('api' ':' (apiRules += ApiRule ','?)+ (destroy ?= 'destroy')?)?  
	'}'('@' contextRef = [ContextName])?
;

UniqueComponentAccess:
	'unique' ':' apiRule = ApiRule ('@' contextRef = [ContextName])?
;

Group:
	(group?='group' | unique?='unique') name = ValidID '{'
		'matcher' ':' ('allOf' '(' (allOfComponents += [AComponent]','?)+ ')')? ('anyOf' '(' anyOfComponents += [AComponent]+ ')')? ('noneOf' '(' noneOfComponents += [AComponent]+ ')')?
		('api' ':' (apiRules += ApiRule ','?)+)?
		(destroy ?= 'destroy')?
	'}' ('@' contextRef = [ContextName])?
;

ApiRule:
	component = [AComponent] ('(' (accesors += ComponentApiAccessor','?)+ ')')?
;

ComponentApiAccessor:
	'add' | 'get' | 'has' | 'replace' | 'remove'
;

ASystem:
	System | Chain
;

Chain:
	'chain' (componentAlias ?= 'comp' (contextRef = ContextReference)? (unique ?= 'unique')? )? name = ValidID '{'
		(
		precondition ?= 'precondition' ('{' 
			(uniqueComp += UniqueComponentAccess)*
			(groups += Group)*
		'}')?
		)? 
		(children += [ASystem]','?)+ 
	'}' 
;

Procedure:
	'proc' (componentAlias ?= 'comp' (contextRef = ContextReference)? (unique ?= 'unique')? )? name = ValidID '{'
		('params' '{' 
			(params += Parameter)+
		'}')?
		(uniqueComp += UniqueComponentAccess)*
		(groups += Group)*
		(index += Index)*
		(createRules += CreateRule)*
	'}' ('->' type=[Alias])?
;

Observer: 
	'observer' name = ValidID '{'
		observedGroup = Group
		(uniqueComp += UniqueComponentAccess)*
		(groups += Group)*
		(createRules += CreateRule)*
	'}'
;

Parameter :
	name = ValidID ':' type=[Alias]
;

QualifiedName:
  ValidID ('.' ValidID)*;
  
ValidID:
  ID | 'input' | 'trigger' | 'api' | 'matcher' | 'group' | 'alias' | 'platform' | 'chain' | 'precondition' | 'proc' | 'procs' | 'key' | 'index' | 'observer';
  