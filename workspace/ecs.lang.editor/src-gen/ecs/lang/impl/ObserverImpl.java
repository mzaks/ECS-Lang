/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.CreateRule;
import ecs.lang.Group;
import ecs.lang.LangPackage;
import ecs.lang.Observer;
import ecs.lang.UniqueComponentAccess;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Observer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.ObserverImpl#getName <em>Name</em>}</li>
 *   <li>{@link ecs.lang.impl.ObserverImpl#getObservedGroup <em>Observed Group</em>}</li>
 *   <li>{@link ecs.lang.impl.ObserverImpl#getUniqueComp <em>Unique Comp</em>}</li>
 *   <li>{@link ecs.lang.impl.ObserverImpl#getGroups <em>Groups</em>}</li>
 *   <li>{@link ecs.lang.impl.ObserverImpl#getCreateRules <em>Create Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObserverImpl extends MinimalEObjectImpl.Container implements Observer
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getObservedGroup() <em>Observed Group</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObservedGroup()
   * @generated
   * @ordered
   */
  protected Group observedGroup;

  /**
   * The cached value of the '{@link #getUniqueComp() <em>Unique Comp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUniqueComp()
   * @generated
   * @ordered
   */
  protected EList<UniqueComponentAccess> uniqueComp;

  /**
   * The cached value of the '{@link #getGroups() <em>Groups</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroups()
   * @generated
   * @ordered
   */
  protected EList<Group> groups;

  /**
   * The cached value of the '{@link #getCreateRules() <em>Create Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreateRules()
   * @generated
   * @ordered
   */
  protected EList<CreateRule> createRules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObserverImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.OBSERVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.OBSERVER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Group getObservedGroup()
  {
    return observedGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObservedGroup(Group newObservedGroup, NotificationChain msgs)
  {
    Group oldObservedGroup = observedGroup;
    observedGroup = newObservedGroup;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LangPackage.OBSERVER__OBSERVED_GROUP, oldObservedGroup, newObservedGroup);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setObservedGroup(Group newObservedGroup)
  {
    if (newObservedGroup != observedGroup)
    {
      NotificationChain msgs = null;
      if (observedGroup != null)
        msgs = ((InternalEObject)observedGroup).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LangPackage.OBSERVER__OBSERVED_GROUP, null, msgs);
      if (newObservedGroup != null)
        msgs = ((InternalEObject)newObservedGroup).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LangPackage.OBSERVER__OBSERVED_GROUP, null, msgs);
      msgs = basicSetObservedGroup(newObservedGroup, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.OBSERVER__OBSERVED_GROUP, newObservedGroup, newObservedGroup));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<UniqueComponentAccess> getUniqueComp()
  {
    if (uniqueComp == null)
    {
      uniqueComp = new EObjectContainmentEList<UniqueComponentAccess>(UniqueComponentAccess.class, this, LangPackage.OBSERVER__UNIQUE_COMP);
    }
    return uniqueComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Group> getGroups()
  {
    if (groups == null)
    {
      groups = new EObjectContainmentEList<Group>(Group.class, this, LangPackage.OBSERVER__GROUPS);
    }
    return groups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<CreateRule> getCreateRules()
  {
    if (createRules == null)
    {
      createRules = new EObjectContainmentEList<CreateRule>(CreateRule.class, this, LangPackage.OBSERVER__CREATE_RULES);
    }
    return createRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.OBSERVER__OBSERVED_GROUP:
        return basicSetObservedGroup(null, msgs);
      case LangPackage.OBSERVER__UNIQUE_COMP:
        return ((InternalEList<?>)getUniqueComp()).basicRemove(otherEnd, msgs);
      case LangPackage.OBSERVER__GROUPS:
        return ((InternalEList<?>)getGroups()).basicRemove(otherEnd, msgs);
      case LangPackage.OBSERVER__CREATE_RULES:
        return ((InternalEList<?>)getCreateRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.OBSERVER__NAME:
        return getName();
      case LangPackage.OBSERVER__OBSERVED_GROUP:
        return getObservedGroup();
      case LangPackage.OBSERVER__UNIQUE_COMP:
        return getUniqueComp();
      case LangPackage.OBSERVER__GROUPS:
        return getGroups();
      case LangPackage.OBSERVER__CREATE_RULES:
        return getCreateRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.OBSERVER__NAME:
        setName((String)newValue);
        return;
      case LangPackage.OBSERVER__OBSERVED_GROUP:
        setObservedGroup((Group)newValue);
        return;
      case LangPackage.OBSERVER__UNIQUE_COMP:
        getUniqueComp().clear();
        getUniqueComp().addAll((Collection<? extends UniqueComponentAccess>)newValue);
        return;
      case LangPackage.OBSERVER__GROUPS:
        getGroups().clear();
        getGroups().addAll((Collection<? extends Group>)newValue);
        return;
      case LangPackage.OBSERVER__CREATE_RULES:
        getCreateRules().clear();
        getCreateRules().addAll((Collection<? extends CreateRule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.OBSERVER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LangPackage.OBSERVER__OBSERVED_GROUP:
        setObservedGroup((Group)null);
        return;
      case LangPackage.OBSERVER__UNIQUE_COMP:
        getUniqueComp().clear();
        return;
      case LangPackage.OBSERVER__GROUPS:
        getGroups().clear();
        return;
      case LangPackage.OBSERVER__CREATE_RULES:
        getCreateRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.OBSERVER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LangPackage.OBSERVER__OBSERVED_GROUP:
        return observedGroup != null;
      case LangPackage.OBSERVER__UNIQUE_COMP:
        return uniqueComp != null && !uniqueComp.isEmpty();
      case LangPackage.OBSERVER__GROUPS:
        return groups != null && !groups.isEmpty();
      case LangPackage.OBSERVER__CREATE_RULES:
        return createRules != null && !createRules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ObserverImpl
