/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.ApiRule;
import ecs.lang.Component;
import ecs.lang.ContextName;
import ecs.lang.Index;
import ecs.lang.LangPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Index</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.IndexImpl#getName <em>Name</em>}</li>
 *   <li>{@link ecs.lang.impl.IndexImpl#getComponentRef <em>Component Ref</em>}</li>
 *   <li>{@link ecs.lang.impl.IndexImpl#getApiRules <em>Api Rules</em>}</li>
 *   <li>{@link ecs.lang.impl.IndexImpl#isDestroy <em>Destroy</em>}</li>
 *   <li>{@link ecs.lang.impl.IndexImpl#getContextRef <em>Context Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IndexImpl extends MinimalEObjectImpl.Container implements Index
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getComponentRef() <em>Component Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponentRef()
   * @generated
   * @ordered
   */
  protected Component componentRef;

  /**
   * The cached value of the '{@link #getApiRules() <em>Api Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApiRules()
   * @generated
   * @ordered
   */
  protected EList<ApiRule> apiRules;

  /**
   * The default value of the '{@link #isDestroy() <em>Destroy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDestroy()
   * @generated
   * @ordered
   */
  protected static final boolean DESTROY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDestroy() <em>Destroy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDestroy()
   * @generated
   * @ordered
   */
  protected boolean destroy = DESTROY_EDEFAULT;

  /**
   * The cached value of the '{@link #getContextRef() <em>Context Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextRef()
   * @generated
   * @ordered
   */
  protected ContextName contextRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.INDEX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.INDEX__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component getComponentRef()
  {
    if (componentRef != null && componentRef.eIsProxy())
    {
      InternalEObject oldComponentRef = (InternalEObject)componentRef;
      componentRef = (Component)eResolveProxy(oldComponentRef);
      if (componentRef != oldComponentRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.INDEX__COMPONENT_REF, oldComponentRef, componentRef));
      }
    }
    return componentRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component basicGetComponentRef()
  {
    return componentRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComponentRef(Component newComponentRef)
  {
    Component oldComponentRef = componentRef;
    componentRef = newComponentRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.INDEX__COMPONENT_REF, oldComponentRef, componentRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ApiRule> getApiRules()
  {
    if (apiRules == null)
    {
      apiRules = new EObjectContainmentEList<ApiRule>(ApiRule.class, this, LangPackage.INDEX__API_RULES);
    }
    return apiRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isDestroy()
  {
    return destroy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDestroy(boolean newDestroy)
  {
    boolean oldDestroy = destroy;
    destroy = newDestroy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.INDEX__DESTROY, oldDestroy, destroy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextName getContextRef()
  {
    if (contextRef != null && contextRef.eIsProxy())
    {
      InternalEObject oldContextRef = (InternalEObject)contextRef;
      contextRef = (ContextName)eResolveProxy(oldContextRef);
      if (contextRef != oldContextRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.INDEX__CONTEXT_REF, oldContextRef, contextRef));
      }
    }
    return contextRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextName basicGetContextRef()
  {
    return contextRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContextRef(ContextName newContextRef)
  {
    ContextName oldContextRef = contextRef;
    contextRef = newContextRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.INDEX__CONTEXT_REF, oldContextRef, contextRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.INDEX__API_RULES:
        return ((InternalEList<?>)getApiRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.INDEX__NAME:
        return getName();
      case LangPackage.INDEX__COMPONENT_REF:
        if (resolve) return getComponentRef();
        return basicGetComponentRef();
      case LangPackage.INDEX__API_RULES:
        return getApiRules();
      case LangPackage.INDEX__DESTROY:
        return isDestroy();
      case LangPackage.INDEX__CONTEXT_REF:
        if (resolve) return getContextRef();
        return basicGetContextRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.INDEX__NAME:
        setName((String)newValue);
        return;
      case LangPackage.INDEX__COMPONENT_REF:
        setComponentRef((Component)newValue);
        return;
      case LangPackage.INDEX__API_RULES:
        getApiRules().clear();
        getApiRules().addAll((Collection<? extends ApiRule>)newValue);
        return;
      case LangPackage.INDEX__DESTROY:
        setDestroy((Boolean)newValue);
        return;
      case LangPackage.INDEX__CONTEXT_REF:
        setContextRef((ContextName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.INDEX__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LangPackage.INDEX__COMPONENT_REF:
        setComponentRef((Component)null);
        return;
      case LangPackage.INDEX__API_RULES:
        getApiRules().clear();
        return;
      case LangPackage.INDEX__DESTROY:
        setDestroy(DESTROY_EDEFAULT);
        return;
      case LangPackage.INDEX__CONTEXT_REF:
        setContextRef((ContextName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.INDEX__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LangPackage.INDEX__COMPONENT_REF:
        return componentRef != null;
      case LangPackage.INDEX__API_RULES:
        return apiRules != null && !apiRules.isEmpty();
      case LangPackage.INDEX__DESTROY:
        return destroy != DESTROY_EDEFAULT;
      case LangPackage.INDEX__CONTEXT_REF:
        return contextRef != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", destroy: ");
    result.append(destroy);
    result.append(')');
    return result.toString();
  }

} //IndexImpl
