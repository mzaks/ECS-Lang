/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.ASystem;
import ecs.lang.Chain;
import ecs.lang.Group;
import ecs.lang.LangPackage;
import ecs.lang.UniqueComponentAccess;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chain</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.ChainImpl#isPrecondition <em>Precondition</em>}</li>
 *   <li>{@link ecs.lang.impl.ChainImpl#getUniqueComp <em>Unique Comp</em>}</li>
 *   <li>{@link ecs.lang.impl.ChainImpl#getGroups <em>Groups</em>}</li>
 *   <li>{@link ecs.lang.impl.ChainImpl#getChildren <em>Children</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChainImpl extends AComponentImpl implements Chain
{
  /**
   * The default value of the '{@link #isPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrecondition()
   * @generated
   * @ordered
   */
  protected static final boolean PRECONDITION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPrecondition()
   * @generated
   * @ordered
   */
  protected boolean precondition = PRECONDITION_EDEFAULT;

  /**
   * The cached value of the '{@link #getUniqueComp() <em>Unique Comp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUniqueComp()
   * @generated
   * @ordered
   */
  protected EList<UniqueComponentAccess> uniqueComp;

  /**
   * The cached value of the '{@link #getGroups() <em>Groups</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroups()
   * @generated
   * @ordered
   */
  protected EList<Group> groups;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<ASystem> children;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.CHAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isPrecondition()
  {
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrecondition(boolean newPrecondition)
  {
    boolean oldPrecondition = precondition;
    precondition = newPrecondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.CHAIN__PRECONDITION, oldPrecondition, precondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<UniqueComponentAccess> getUniqueComp()
  {
    if (uniqueComp == null)
    {
      uniqueComp = new EObjectContainmentEList<UniqueComponentAccess>(UniqueComponentAccess.class, this, LangPackage.CHAIN__UNIQUE_COMP);
    }
    return uniqueComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Group> getGroups()
  {
    if (groups == null)
    {
      groups = new EObjectContainmentEList<Group>(Group.class, this, LangPackage.CHAIN__GROUPS);
    }
    return groups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ASystem> getChildren()
  {
    if (children == null)
    {
      children = new EObjectResolvingEList<ASystem>(ASystem.class, this, LangPackage.CHAIN__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.CHAIN__UNIQUE_COMP:
        return ((InternalEList<?>)getUniqueComp()).basicRemove(otherEnd, msgs);
      case LangPackage.CHAIN__GROUPS:
        return ((InternalEList<?>)getGroups()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.CHAIN__PRECONDITION:
        return isPrecondition();
      case LangPackage.CHAIN__UNIQUE_COMP:
        return getUniqueComp();
      case LangPackage.CHAIN__GROUPS:
        return getGroups();
      case LangPackage.CHAIN__CHILDREN:
        return getChildren();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.CHAIN__PRECONDITION:
        setPrecondition((Boolean)newValue);
        return;
      case LangPackage.CHAIN__UNIQUE_COMP:
        getUniqueComp().clear();
        getUniqueComp().addAll((Collection<? extends UniqueComponentAccess>)newValue);
        return;
      case LangPackage.CHAIN__GROUPS:
        getGroups().clear();
        getGroups().addAll((Collection<? extends Group>)newValue);
        return;
      case LangPackage.CHAIN__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends ASystem>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.CHAIN__PRECONDITION:
        setPrecondition(PRECONDITION_EDEFAULT);
        return;
      case LangPackage.CHAIN__UNIQUE_COMP:
        getUniqueComp().clear();
        return;
      case LangPackage.CHAIN__GROUPS:
        getGroups().clear();
        return;
      case LangPackage.CHAIN__CHILDREN:
        getChildren().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.CHAIN__PRECONDITION:
        return precondition != PRECONDITION_EDEFAULT;
      case LangPackage.CHAIN__UNIQUE_COMP:
        return uniqueComp != null && !uniqueComp.isEmpty();
      case LangPackage.CHAIN__GROUPS:
        return groups != null && !groups.isEmpty();
      case LangPackage.CHAIN__CHILDREN:
        return children != null && !children.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (precondition: ");
    result.append(precondition);
    result.append(')');
    return result.toString();
  }

} //ChainImpl
