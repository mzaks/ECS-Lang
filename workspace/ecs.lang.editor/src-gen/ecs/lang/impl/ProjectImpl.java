/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.Alias;
import ecs.lang.Component;
import ecs.lang.ContextDefinition;
import ecs.lang.LangPackage;
import ecs.lang.Namespace;
import ecs.lang.ParentSystem;
import ecs.lang.Platforms;
import ecs.lang.Project;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Project</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getPlatformDefinition <em>Platform Definition</em>}</li>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getNamespace <em>Namespace</em>}</li>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getTypeAliases <em>Type Aliases</em>}</li>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getComponents <em>Components</em>}</li>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getSystems <em>Systems</em>}</li>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getParentSystems <em>Parent Systems</em>}</li>
 *   <li>{@link ecs.lang.impl.ProjectImpl#getContextDefinitions <em>Context Definitions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProjectImpl extends MinimalEObjectImpl.Container implements Project
{
  /**
   * The cached value of the '{@link #getPlatformDefinition() <em>Platform Definition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlatformDefinition()
   * @generated
   * @ordered
   */
  protected Platforms platformDefinition;

  /**
   * The cached value of the '{@link #getNamespace() <em>Namespace</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNamespace()
   * @generated
   * @ordered
   */
  protected Namespace namespace;

  /**
   * The cached value of the '{@link #getTypeAliases() <em>Type Aliases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeAliases()
   * @generated
   * @ordered
   */
  protected EList<Alias> typeAliases;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<Component> components;

  /**
   * The cached value of the '{@link #getSystems() <em>Systems</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSystems()
   * @generated
   * @ordered
   */
  protected EList<ecs.lang.System> systems;

  /**
   * The cached value of the '{@link #getParentSystems() <em>Parent Systems</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParentSystems()
   * @generated
   * @ordered
   */
  protected EList<ParentSystem> parentSystems;

  /**
   * The cached value of the '{@link #getContextDefinitions() <em>Context Definitions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextDefinitions()
   * @generated
   * @ordered
   */
  protected EList<ContextDefinition> contextDefinitions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.PROJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Platforms getPlatformDefinition()
  {
    return platformDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPlatformDefinition(Platforms newPlatformDefinition, NotificationChain msgs)
  {
    Platforms oldPlatformDefinition = platformDefinition;
    platformDefinition = newPlatformDefinition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LangPackage.PROJECT__PLATFORM_DEFINITION, oldPlatformDefinition, newPlatformDefinition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPlatformDefinition(Platforms newPlatformDefinition)
  {
    if (newPlatformDefinition != platformDefinition)
    {
      NotificationChain msgs = null;
      if (platformDefinition != null)
        msgs = ((InternalEObject)platformDefinition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LangPackage.PROJECT__PLATFORM_DEFINITION, null, msgs);
      if (newPlatformDefinition != null)
        msgs = ((InternalEObject)newPlatformDefinition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LangPackage.PROJECT__PLATFORM_DEFINITION, null, msgs);
      msgs = basicSetPlatformDefinition(newPlatformDefinition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROJECT__PLATFORM_DEFINITION, newPlatformDefinition, newPlatformDefinition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Namespace getNamespace()
  {
    return namespace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNamespace(Namespace newNamespace, NotificationChain msgs)
  {
    Namespace oldNamespace = namespace;
    namespace = newNamespace;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LangPackage.PROJECT__NAMESPACE, oldNamespace, newNamespace);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNamespace(Namespace newNamespace)
  {
    if (newNamespace != namespace)
    {
      NotificationChain msgs = null;
      if (namespace != null)
        msgs = ((InternalEObject)namespace).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LangPackage.PROJECT__NAMESPACE, null, msgs);
      if (newNamespace != null)
        msgs = ((InternalEObject)newNamespace).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LangPackage.PROJECT__NAMESPACE, null, msgs);
      msgs = basicSetNamespace(newNamespace, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROJECT__NAMESPACE, newNamespace, newNamespace));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Alias> getTypeAliases()
  {
    if (typeAliases == null)
    {
      typeAliases = new EObjectContainmentEList<Alias>(Alias.class, this, LangPackage.PROJECT__TYPE_ALIASES);
    }
    return typeAliases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<Component>(Component.class, this, LangPackage.PROJECT__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ecs.lang.System> getSystems()
  {
    if (systems == null)
    {
      systems = new EObjectContainmentEList<ecs.lang.System>(ecs.lang.System.class, this, LangPackage.PROJECT__SYSTEMS);
    }
    return systems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ParentSystem> getParentSystems()
  {
    if (parentSystems == null)
    {
      parentSystems = new EObjectContainmentEList<ParentSystem>(ParentSystem.class, this, LangPackage.PROJECT__PARENT_SYSTEMS);
    }
    return parentSystems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ContextDefinition> getContextDefinitions()
  {
    if (contextDefinitions == null)
    {
      contextDefinitions = new EObjectContainmentEList<ContextDefinition>(ContextDefinition.class, this, LangPackage.PROJECT__CONTEXT_DEFINITIONS);
    }
    return contextDefinitions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.PROJECT__PLATFORM_DEFINITION:
        return basicSetPlatformDefinition(null, msgs);
      case LangPackage.PROJECT__NAMESPACE:
        return basicSetNamespace(null, msgs);
      case LangPackage.PROJECT__TYPE_ALIASES:
        return ((InternalEList<?>)getTypeAliases()).basicRemove(otherEnd, msgs);
      case LangPackage.PROJECT__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
      case LangPackage.PROJECT__SYSTEMS:
        return ((InternalEList<?>)getSystems()).basicRemove(otherEnd, msgs);
      case LangPackage.PROJECT__PARENT_SYSTEMS:
        return ((InternalEList<?>)getParentSystems()).basicRemove(otherEnd, msgs);
      case LangPackage.PROJECT__CONTEXT_DEFINITIONS:
        return ((InternalEList<?>)getContextDefinitions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.PROJECT__PLATFORM_DEFINITION:
        return getPlatformDefinition();
      case LangPackage.PROJECT__NAMESPACE:
        return getNamespace();
      case LangPackage.PROJECT__TYPE_ALIASES:
        return getTypeAliases();
      case LangPackage.PROJECT__COMPONENTS:
        return getComponents();
      case LangPackage.PROJECT__SYSTEMS:
        return getSystems();
      case LangPackage.PROJECT__PARENT_SYSTEMS:
        return getParentSystems();
      case LangPackage.PROJECT__CONTEXT_DEFINITIONS:
        return getContextDefinitions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.PROJECT__PLATFORM_DEFINITION:
        setPlatformDefinition((Platforms)newValue);
        return;
      case LangPackage.PROJECT__NAMESPACE:
        setNamespace((Namespace)newValue);
        return;
      case LangPackage.PROJECT__TYPE_ALIASES:
        getTypeAliases().clear();
        getTypeAliases().addAll((Collection<? extends Alias>)newValue);
        return;
      case LangPackage.PROJECT__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends Component>)newValue);
        return;
      case LangPackage.PROJECT__SYSTEMS:
        getSystems().clear();
        getSystems().addAll((Collection<? extends ecs.lang.System>)newValue);
        return;
      case LangPackage.PROJECT__PARENT_SYSTEMS:
        getParentSystems().clear();
        getParentSystems().addAll((Collection<? extends ParentSystem>)newValue);
        return;
      case LangPackage.PROJECT__CONTEXT_DEFINITIONS:
        getContextDefinitions().clear();
        getContextDefinitions().addAll((Collection<? extends ContextDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.PROJECT__PLATFORM_DEFINITION:
        setPlatformDefinition((Platforms)null);
        return;
      case LangPackage.PROJECT__NAMESPACE:
        setNamespace((Namespace)null);
        return;
      case LangPackage.PROJECT__TYPE_ALIASES:
        getTypeAliases().clear();
        return;
      case LangPackage.PROJECT__COMPONENTS:
        getComponents().clear();
        return;
      case LangPackage.PROJECT__SYSTEMS:
        getSystems().clear();
        return;
      case LangPackage.PROJECT__PARENT_SYSTEMS:
        getParentSystems().clear();
        return;
      case LangPackage.PROJECT__CONTEXT_DEFINITIONS:
        getContextDefinitions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.PROJECT__PLATFORM_DEFINITION:
        return platformDefinition != null;
      case LangPackage.PROJECT__NAMESPACE:
        return namespace != null;
      case LangPackage.PROJECT__TYPE_ALIASES:
        return typeAliases != null && !typeAliases.isEmpty();
      case LangPackage.PROJECT__COMPONENTS:
        return components != null && !components.isEmpty();
      case LangPackage.PROJECT__SYSTEMS:
        return systems != null && !systems.isEmpty();
      case LangPackage.PROJECT__PARENT_SYSTEMS:
        return parentSystems != null && !parentSystems.isEmpty();
      case LangPackage.PROJECT__CONTEXT_DEFINITIONS:
        return contextDefinitions != null && !contextDefinitions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ProjectImpl
