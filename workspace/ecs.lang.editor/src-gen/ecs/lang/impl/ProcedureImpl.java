/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.Alias;
import ecs.lang.ContextReference;
import ecs.lang.CreateRule;
import ecs.lang.Group;
import ecs.lang.Index;
import ecs.lang.LangPackage;
import ecs.lang.Parameter;
import ecs.lang.Procedure;
import ecs.lang.UniqueComponentAccess;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Procedure</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#isComponentAlias <em>Component Alias</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getContextRef <em>Context Ref</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#isUnique <em>Unique</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getName <em>Name</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getParams <em>Params</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getUniqueComp <em>Unique Comp</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getGroups <em>Groups</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getIndex <em>Index</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getCreateRules <em>Create Rules</em>}</li>
 *   <li>{@link ecs.lang.impl.ProcedureImpl#getType <em>Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProcedureImpl extends MinimalEObjectImpl.Container implements Procedure
{
  /**
   * The default value of the '{@link #isComponentAlias() <em>Component Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComponentAlias()
   * @generated
   * @ordered
   */
  protected static final boolean COMPONENT_ALIAS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isComponentAlias() <em>Component Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComponentAlias()
   * @generated
   * @ordered
   */
  protected boolean componentAlias = COMPONENT_ALIAS_EDEFAULT;

  /**
   * The cached value of the '{@link #getContextRef() <em>Context Ref</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContextRef()
   * @generated
   * @ordered
   */
  protected ContextReference contextRef;

  /**
   * The default value of the '{@link #isUnique() <em>Unique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUnique()
   * @generated
   * @ordered
   */
  protected static final boolean UNIQUE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUnique() <em>Unique</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUnique()
   * @generated
   * @ordered
   */
  protected boolean unique = UNIQUE_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<Parameter> params;

  /**
   * The cached value of the '{@link #getUniqueComp() <em>Unique Comp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUniqueComp()
   * @generated
   * @ordered
   */
  protected EList<UniqueComponentAccess> uniqueComp;

  /**
   * The cached value of the '{@link #getGroups() <em>Groups</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroups()
   * @generated
   * @ordered
   */
  protected EList<Group> groups;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected EList<Index> index;

  /**
   * The cached value of the '{@link #getCreateRules() <em>Create Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreateRules()
   * @generated
   * @ordered
   */
  protected EList<CreateRule> createRules;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected Alias type;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProcedureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.PROCEDURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isComponentAlias()
  {
    return componentAlias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComponentAlias(boolean newComponentAlias)
  {
    boolean oldComponentAlias = componentAlias;
    componentAlias = newComponentAlias;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROCEDURE__COMPONENT_ALIAS, oldComponentAlias, componentAlias));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextReference getContextRef()
  {
    return contextRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContextRef(ContextReference newContextRef, NotificationChain msgs)
  {
    ContextReference oldContextRef = contextRef;
    contextRef = newContextRef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LangPackage.PROCEDURE__CONTEXT_REF, oldContextRef, newContextRef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContextRef(ContextReference newContextRef)
  {
    if (newContextRef != contextRef)
    {
      NotificationChain msgs = null;
      if (contextRef != null)
        msgs = ((InternalEObject)contextRef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LangPackage.PROCEDURE__CONTEXT_REF, null, msgs);
      if (newContextRef != null)
        msgs = ((InternalEObject)newContextRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LangPackage.PROCEDURE__CONTEXT_REF, null, msgs);
      msgs = basicSetContextRef(newContextRef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROCEDURE__CONTEXT_REF, newContextRef, newContextRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isUnique()
  {
    return unique;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUnique(boolean newUnique)
  {
    boolean oldUnique = unique;
    unique = newUnique;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROCEDURE__UNIQUE, oldUnique, unique));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROCEDURE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Parameter> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<Parameter>(Parameter.class, this, LangPackage.PROCEDURE__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<UniqueComponentAccess> getUniqueComp()
  {
    if (uniqueComp == null)
    {
      uniqueComp = new EObjectContainmentEList<UniqueComponentAccess>(UniqueComponentAccess.class, this, LangPackage.PROCEDURE__UNIQUE_COMP);
    }
    return uniqueComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Group> getGroups()
  {
    if (groups == null)
    {
      groups = new EObjectContainmentEList<Group>(Group.class, this, LangPackage.PROCEDURE__GROUPS);
    }
    return groups;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Index> getIndex()
  {
    if (index == null)
    {
      index = new EObjectContainmentEList<Index>(Index.class, this, LangPackage.PROCEDURE__INDEX);
    }
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<CreateRule> getCreateRules()
  {
    if (createRules == null)
    {
      createRules = new EObjectContainmentEList<CreateRule>(CreateRule.class, this, LangPackage.PROCEDURE__CREATE_RULES);
    }
    return createRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias getType()
  {
    if (type != null && type.eIsProxy())
    {
      InternalEObject oldType = (InternalEObject)type;
      type = (Alias)eResolveProxy(oldType);
      if (type != oldType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.PROCEDURE__TYPE, oldType, type));
      }
    }
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias basicGetType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(Alias newType)
  {
    Alias oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PROCEDURE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.PROCEDURE__CONTEXT_REF:
        return basicSetContextRef(null, msgs);
      case LangPackage.PROCEDURE__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
      case LangPackage.PROCEDURE__UNIQUE_COMP:
        return ((InternalEList<?>)getUniqueComp()).basicRemove(otherEnd, msgs);
      case LangPackage.PROCEDURE__GROUPS:
        return ((InternalEList<?>)getGroups()).basicRemove(otherEnd, msgs);
      case LangPackage.PROCEDURE__INDEX:
        return ((InternalEList<?>)getIndex()).basicRemove(otherEnd, msgs);
      case LangPackage.PROCEDURE__CREATE_RULES:
        return ((InternalEList<?>)getCreateRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.PROCEDURE__COMPONENT_ALIAS:
        return isComponentAlias();
      case LangPackage.PROCEDURE__CONTEXT_REF:
        return getContextRef();
      case LangPackage.PROCEDURE__UNIQUE:
        return isUnique();
      case LangPackage.PROCEDURE__NAME:
        return getName();
      case LangPackage.PROCEDURE__PARAMS:
        return getParams();
      case LangPackage.PROCEDURE__UNIQUE_COMP:
        return getUniqueComp();
      case LangPackage.PROCEDURE__GROUPS:
        return getGroups();
      case LangPackage.PROCEDURE__INDEX:
        return getIndex();
      case LangPackage.PROCEDURE__CREATE_RULES:
        return getCreateRules();
      case LangPackage.PROCEDURE__TYPE:
        if (resolve) return getType();
        return basicGetType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.PROCEDURE__COMPONENT_ALIAS:
        setComponentAlias((Boolean)newValue);
        return;
      case LangPackage.PROCEDURE__CONTEXT_REF:
        setContextRef((ContextReference)newValue);
        return;
      case LangPackage.PROCEDURE__UNIQUE:
        setUnique((Boolean)newValue);
        return;
      case LangPackage.PROCEDURE__NAME:
        setName((String)newValue);
        return;
      case LangPackage.PROCEDURE__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends Parameter>)newValue);
        return;
      case LangPackage.PROCEDURE__UNIQUE_COMP:
        getUniqueComp().clear();
        getUniqueComp().addAll((Collection<? extends UniqueComponentAccess>)newValue);
        return;
      case LangPackage.PROCEDURE__GROUPS:
        getGroups().clear();
        getGroups().addAll((Collection<? extends Group>)newValue);
        return;
      case LangPackage.PROCEDURE__INDEX:
        getIndex().clear();
        getIndex().addAll((Collection<? extends Index>)newValue);
        return;
      case LangPackage.PROCEDURE__CREATE_RULES:
        getCreateRules().clear();
        getCreateRules().addAll((Collection<? extends CreateRule>)newValue);
        return;
      case LangPackage.PROCEDURE__TYPE:
        setType((Alias)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.PROCEDURE__COMPONENT_ALIAS:
        setComponentAlias(COMPONENT_ALIAS_EDEFAULT);
        return;
      case LangPackage.PROCEDURE__CONTEXT_REF:
        setContextRef((ContextReference)null);
        return;
      case LangPackage.PROCEDURE__UNIQUE:
        setUnique(UNIQUE_EDEFAULT);
        return;
      case LangPackage.PROCEDURE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LangPackage.PROCEDURE__PARAMS:
        getParams().clear();
        return;
      case LangPackage.PROCEDURE__UNIQUE_COMP:
        getUniqueComp().clear();
        return;
      case LangPackage.PROCEDURE__GROUPS:
        getGroups().clear();
        return;
      case LangPackage.PROCEDURE__INDEX:
        getIndex().clear();
        return;
      case LangPackage.PROCEDURE__CREATE_RULES:
        getCreateRules().clear();
        return;
      case LangPackage.PROCEDURE__TYPE:
        setType((Alias)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.PROCEDURE__COMPONENT_ALIAS:
        return componentAlias != COMPONENT_ALIAS_EDEFAULT;
      case LangPackage.PROCEDURE__CONTEXT_REF:
        return contextRef != null;
      case LangPackage.PROCEDURE__UNIQUE:
        return unique != UNIQUE_EDEFAULT;
      case LangPackage.PROCEDURE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LangPackage.PROCEDURE__PARAMS:
        return params != null && !params.isEmpty();
      case LangPackage.PROCEDURE__UNIQUE_COMP:
        return uniqueComp != null && !uniqueComp.isEmpty();
      case LangPackage.PROCEDURE__GROUPS:
        return groups != null && !groups.isEmpty();
      case LangPackage.PROCEDURE__INDEX:
        return index != null && !index.isEmpty();
      case LangPackage.PROCEDURE__CREATE_RULES:
        return createRules != null && !createRules.isEmpty();
      case LangPackage.PROCEDURE__TYPE:
        return type != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (componentAlias: ");
    result.append(componentAlias);
    result.append(", unique: ");
    result.append(unique);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ProcedureImpl
