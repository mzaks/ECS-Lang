/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.Alias;
import ecs.lang.Component;
import ecs.lang.ComponentProperty;
import ecs.lang.LangPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Component</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.ComponentImpl#getValueType <em>Value Type</em>}</li>
 *   <li>{@link ecs.lang.impl.ComponentImpl#isIndex <em>Index</em>}</li>
 *   <li>{@link ecs.lang.impl.ComponentImpl#isMultiIndex <em>Multi Index</em>}</li>
 *   <li>{@link ecs.lang.impl.ComponentImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link ecs.lang.impl.ComponentImpl#getPrefix <em>Prefix</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComponentImpl extends AComponentImpl implements Component
{
  /**
   * The cached value of the '{@link #getValueType() <em>Value Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueType()
   * @generated
   * @ordered
   */
  protected Alias valueType;

  /**
   * The default value of the '{@link #isIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIndex()
   * @generated
   * @ordered
   */
  protected static final boolean INDEX_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isIndex() <em>Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isIndex()
   * @generated
   * @ordered
   */
  protected boolean index = INDEX_EDEFAULT;

  /**
   * The default value of the '{@link #isMultiIndex() <em>Multi Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultiIndex()
   * @generated
   * @ordered
   */
  protected static final boolean MULTI_INDEX_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMultiIndex() <em>Multi Index</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMultiIndex()
   * @generated
   * @ordered
   */
  protected boolean multiIndex = MULTI_INDEX_EDEFAULT;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<ComponentProperty> properties;

  /**
   * The default value of the '{@link #getPrefix() <em>Prefix</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrefix()
   * @generated
   * @ordered
   */
  protected static final String PREFIX_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrefix() <em>Prefix</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrefix()
   * @generated
   * @ordered
   */
  protected String prefix = PREFIX_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComponentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.COMPONENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias getValueType()
  {
    if (valueType != null && valueType.eIsProxy())
    {
      InternalEObject oldValueType = (InternalEObject)valueType;
      valueType = (Alias)eResolveProxy(oldValueType);
      if (valueType != oldValueType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.COMPONENT__VALUE_TYPE, oldValueType, valueType));
      }
    }
    return valueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias basicGetValueType()
  {
    return valueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValueType(Alias newValueType)
  {
    Alias oldValueType = valueType;
    valueType = newValueType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.COMPONENT__VALUE_TYPE, oldValueType, valueType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndex(boolean newIndex)
  {
    boolean oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.COMPONENT__INDEX, oldIndex, index));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isMultiIndex()
  {
    return multiIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultiIndex(boolean newMultiIndex)
  {
    boolean oldMultiIndex = multiIndex;
    multiIndex = newMultiIndex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.COMPONENT__MULTI_INDEX, oldMultiIndex, multiIndex));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentProperty> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<ComponentProperty>(ComponentProperty.class, this, LangPackage.COMPONENT__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPrefix()
  {
    return prefix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrefix(String newPrefix)
  {
    String oldPrefix = prefix;
    prefix = newPrefix;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.COMPONENT__PREFIX, oldPrefix, prefix));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LangPackage.COMPONENT__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.COMPONENT__VALUE_TYPE:
        if (resolve) return getValueType();
        return basicGetValueType();
      case LangPackage.COMPONENT__INDEX:
        return isIndex();
      case LangPackage.COMPONENT__MULTI_INDEX:
        return isMultiIndex();
      case LangPackage.COMPONENT__PROPERTIES:
        return getProperties();
      case LangPackage.COMPONENT__PREFIX:
        return getPrefix();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.COMPONENT__VALUE_TYPE:
        setValueType((Alias)newValue);
        return;
      case LangPackage.COMPONENT__INDEX:
        setIndex((Boolean)newValue);
        return;
      case LangPackage.COMPONENT__MULTI_INDEX:
        setMultiIndex((Boolean)newValue);
        return;
      case LangPackage.COMPONENT__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends ComponentProperty>)newValue);
        return;
      case LangPackage.COMPONENT__PREFIX:
        setPrefix((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.COMPONENT__VALUE_TYPE:
        setValueType((Alias)null);
        return;
      case LangPackage.COMPONENT__INDEX:
        setIndex(INDEX_EDEFAULT);
        return;
      case LangPackage.COMPONENT__MULTI_INDEX:
        setMultiIndex(MULTI_INDEX_EDEFAULT);
        return;
      case LangPackage.COMPONENT__PROPERTIES:
        getProperties().clear();
        return;
      case LangPackage.COMPONENT__PREFIX:
        setPrefix(PREFIX_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.COMPONENT__VALUE_TYPE:
        return valueType != null;
      case LangPackage.COMPONENT__INDEX:
        return index != INDEX_EDEFAULT;
      case LangPackage.COMPONENT__MULTI_INDEX:
        return multiIndex != MULTI_INDEX_EDEFAULT;
      case LangPackage.COMPONENT__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case LangPackage.COMPONENT__PREFIX:
        return PREFIX_EDEFAULT == null ? prefix != null : !PREFIX_EDEFAULT.equals(prefix);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (index: ");
    result.append(index);
    result.append(", multiIndex: ");
    result.append(multiIndex);
    result.append(", prefix: ");
    result.append(prefix);
    result.append(')');
    return result.toString();
  }

} //ComponentImpl
