/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.ASystem;
import ecs.lang.Alias;
import ecs.lang.LangPackage;
import ecs.lang.ParentSystem;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parent System</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.ParentSystemImpl#isComponentAlias <em>Component Alias</em>}</li>
 *   <li>{@link ecs.lang.impl.ParentSystemImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link ecs.lang.impl.ParentSystemImpl#getChildren <em>Children</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParentSystemImpl extends AComponentImpl implements ParentSystem
{
  /**
   * The default value of the '{@link #isComponentAlias() <em>Component Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComponentAlias()
   * @generated
   * @ordered
   */
  protected static final boolean COMPONENT_ALIAS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isComponentAlias() <em>Component Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComponentAlias()
   * @generated
   * @ordered
   */
  protected boolean componentAlias = COMPONENT_ALIAS_EDEFAULT;

  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected Alias parent;

  /**
   * The cached value of the '{@link #getChildren() <em>Children</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildren()
   * @generated
   * @ordered
   */
  protected EList<ASystem> children;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParentSystemImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.PARENT_SYSTEM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isComponentAlias()
  {
    return componentAlias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComponentAlias(boolean newComponentAlias)
  {
    boolean oldComponentAlias = componentAlias;
    componentAlias = newComponentAlias;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PARENT_SYSTEM__COMPONENT_ALIAS, oldComponentAlias, componentAlias));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias getParent()
  {
    if (parent != null && parent.eIsProxy())
    {
      InternalEObject oldParent = (InternalEObject)parent;
      parent = (Alias)eResolveProxy(oldParent);
      if (parent != oldParent)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.PARENT_SYSTEM__PARENT, oldParent, parent));
      }
    }
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias basicGetParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParent(Alias newParent)
  {
    Alias oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.PARENT_SYSTEM__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ASystem> getChildren()
  {
    if (children == null)
    {
      children = new EObjectResolvingEList<ASystem>(ASystem.class, this, LangPackage.PARENT_SYSTEM__CHILDREN);
    }
    return children;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.PARENT_SYSTEM__COMPONENT_ALIAS:
        return isComponentAlias();
      case LangPackage.PARENT_SYSTEM__PARENT:
        if (resolve) return getParent();
        return basicGetParent();
      case LangPackage.PARENT_SYSTEM__CHILDREN:
        return getChildren();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.PARENT_SYSTEM__COMPONENT_ALIAS:
        setComponentAlias((Boolean)newValue);
        return;
      case LangPackage.PARENT_SYSTEM__PARENT:
        setParent((Alias)newValue);
        return;
      case LangPackage.PARENT_SYSTEM__CHILDREN:
        getChildren().clear();
        getChildren().addAll((Collection<? extends ASystem>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.PARENT_SYSTEM__COMPONENT_ALIAS:
        setComponentAlias(COMPONENT_ALIAS_EDEFAULT);
        return;
      case LangPackage.PARENT_SYSTEM__PARENT:
        setParent((Alias)null);
        return;
      case LangPackage.PARENT_SYSTEM__CHILDREN:
        getChildren().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.PARENT_SYSTEM__COMPONENT_ALIAS:
        return componentAlias != COMPONENT_ALIAS_EDEFAULT;
      case LangPackage.PARENT_SYSTEM__PARENT:
        return parent != null;
      case LangPackage.PARENT_SYSTEM__CHILDREN:
        return children != null && !children.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (componentAlias: ");
    result.append(componentAlias);
    result.append(')');
    return result.toString();
  }

} //ParentSystemImpl
