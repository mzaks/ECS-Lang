/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.AComponent;
import ecs.lang.InputTrigger;
import ecs.lang.LangPackage;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Input Trigger</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.InputTriggerImpl#getEnterComponents <em>Enter Components</em>}</li>
 *   <li>{@link ecs.lang.impl.InputTriggerImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link ecs.lang.impl.InputTriggerImpl#getEnteredOrLeft <em>Entered Or Left</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InputTriggerImpl extends MinimalEObjectImpl.Container implements InputTrigger
{
  /**
   * The cached value of the '{@link #getEnterComponents() <em>Enter Components</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnterComponents()
   * @generated
   * @ordered
   */
  protected EList<AComponent> enterComponents;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected EList<AComponent> left;

  /**
   * The cached value of the '{@link #getEnteredOrLeft() <em>Entered Or Left</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnteredOrLeft()
   * @generated
   * @ordered
   */
  protected EList<AComponent> enteredOrLeft;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InputTriggerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.INPUT_TRIGGER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AComponent> getEnterComponents()
  {
    if (enterComponents == null)
    {
      enterComponents = new EObjectResolvingEList<AComponent>(AComponent.class, this, LangPackage.INPUT_TRIGGER__ENTER_COMPONENTS);
    }
    return enterComponents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AComponent> getLeft()
  {
    if (left == null)
    {
      left = new EObjectResolvingEList<AComponent>(AComponent.class, this, LangPackage.INPUT_TRIGGER__LEFT);
    }
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AComponent> getEnteredOrLeft()
  {
    if (enteredOrLeft == null)
    {
      enteredOrLeft = new EObjectResolvingEList<AComponent>(AComponent.class, this, LangPackage.INPUT_TRIGGER__ENTERED_OR_LEFT);
    }
    return enteredOrLeft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.INPUT_TRIGGER__ENTER_COMPONENTS:
        return getEnterComponents();
      case LangPackage.INPUT_TRIGGER__LEFT:
        return getLeft();
      case LangPackage.INPUT_TRIGGER__ENTERED_OR_LEFT:
        return getEnteredOrLeft();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.INPUT_TRIGGER__ENTER_COMPONENTS:
        getEnterComponents().clear();
        getEnterComponents().addAll((Collection<? extends AComponent>)newValue);
        return;
      case LangPackage.INPUT_TRIGGER__LEFT:
        getLeft().clear();
        getLeft().addAll((Collection<? extends AComponent>)newValue);
        return;
      case LangPackage.INPUT_TRIGGER__ENTERED_OR_LEFT:
        getEnteredOrLeft().clear();
        getEnteredOrLeft().addAll((Collection<? extends AComponent>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.INPUT_TRIGGER__ENTER_COMPONENTS:
        getEnterComponents().clear();
        return;
      case LangPackage.INPUT_TRIGGER__LEFT:
        getLeft().clear();
        return;
      case LangPackage.INPUT_TRIGGER__ENTERED_OR_LEFT:
        getEnteredOrLeft().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.INPUT_TRIGGER__ENTER_COMPONENTS:
        return enterComponents != null && !enterComponents.isEmpty();
      case LangPackage.INPUT_TRIGGER__LEFT:
        return left != null && !left.isEmpty();
      case LangPackage.INPUT_TRIGGER__ENTERED_OR_LEFT:
        return enteredOrLeft != null && !enteredOrLeft.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //InputTriggerImpl
