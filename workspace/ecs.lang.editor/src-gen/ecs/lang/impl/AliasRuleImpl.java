/**
 * generated by Xtext 2.10.0
 */
package ecs.lang.impl;

import ecs.lang.AliasRule;
import ecs.lang.LangPackage;
import ecs.lang.PlatformID;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alias Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ecs.lang.impl.AliasRuleImpl#getPlatform <em>Platform</em>}</li>
 *   <li>{@link ecs.lang.impl.AliasRuleImpl#getTypeAlias <em>Type Alias</em>}</li>
 *   <li>{@link ecs.lang.impl.AliasRuleImpl#getSize <em>Size</em>}</li>
 *   <li>{@link ecs.lang.impl.AliasRuleImpl#isVariableSize <em>Variable Size</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AliasRuleImpl extends MinimalEObjectImpl.Container implements AliasRule
{
  /**
   * The cached value of the '{@link #getPlatform() <em>Platform</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlatform()
   * @generated
   * @ordered
   */
  protected PlatformID platform;

  /**
   * The default value of the '{@link #getTypeAlias() <em>Type Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeAlias()
   * @generated
   * @ordered
   */
  protected static final String TYPE_ALIAS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypeAlias() <em>Type Alias</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeAlias()
   * @generated
   * @ordered
   */
  protected String typeAlias = TYPE_ALIAS_EDEFAULT;

  /**
   * The default value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected static final int SIZE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected int size = SIZE_EDEFAULT;

  /**
   * The default value of the '{@link #isVariableSize() <em>Variable Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVariableSize()
   * @generated
   * @ordered
   */
  protected static final boolean VARIABLE_SIZE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isVariableSize() <em>Variable Size</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isVariableSize()
   * @generated
   * @ordered
   */
  protected boolean variableSize = VARIABLE_SIZE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AliasRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LangPackage.Literals.ALIAS_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlatformID getPlatform()
  {
    if (platform != null && platform.eIsProxy())
    {
      InternalEObject oldPlatform = (InternalEObject)platform;
      platform = (PlatformID)eResolveProxy(oldPlatform);
      if (platform != oldPlatform)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, LangPackage.ALIAS_RULE__PLATFORM, oldPlatform, platform));
      }
    }
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlatformID basicGetPlatform()
  {
    return platform;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPlatform(PlatformID newPlatform)
  {
    PlatformID oldPlatform = platform;
    platform = newPlatform;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.ALIAS_RULE__PLATFORM, oldPlatform, platform));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypeAlias()
  {
    return typeAlias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeAlias(String newTypeAlias)
  {
    String oldTypeAlias = typeAlias;
    typeAlias = newTypeAlias;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.ALIAS_RULE__TYPE_ALIAS, oldTypeAlias, typeAlias));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSize(int newSize)
  {
    int oldSize = size;
    size = newSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.ALIAS_RULE__SIZE, oldSize, size));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isVariableSize()
  {
    return variableSize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariableSize(boolean newVariableSize)
  {
    boolean oldVariableSize = variableSize;
    variableSize = newVariableSize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LangPackage.ALIAS_RULE__VARIABLE_SIZE, oldVariableSize, variableSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LangPackage.ALIAS_RULE__PLATFORM:
        if (resolve) return getPlatform();
        return basicGetPlatform();
      case LangPackage.ALIAS_RULE__TYPE_ALIAS:
        return getTypeAlias();
      case LangPackage.ALIAS_RULE__SIZE:
        return getSize();
      case LangPackage.ALIAS_RULE__VARIABLE_SIZE:
        return isVariableSize();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LangPackage.ALIAS_RULE__PLATFORM:
        setPlatform((PlatformID)newValue);
        return;
      case LangPackage.ALIAS_RULE__TYPE_ALIAS:
        setTypeAlias((String)newValue);
        return;
      case LangPackage.ALIAS_RULE__SIZE:
        setSize((Integer)newValue);
        return;
      case LangPackage.ALIAS_RULE__VARIABLE_SIZE:
        setVariableSize((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.ALIAS_RULE__PLATFORM:
        setPlatform((PlatformID)null);
        return;
      case LangPackage.ALIAS_RULE__TYPE_ALIAS:
        setTypeAlias(TYPE_ALIAS_EDEFAULT);
        return;
      case LangPackage.ALIAS_RULE__SIZE:
        setSize(SIZE_EDEFAULT);
        return;
      case LangPackage.ALIAS_RULE__VARIABLE_SIZE:
        setVariableSize(VARIABLE_SIZE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LangPackage.ALIAS_RULE__PLATFORM:
        return platform != null;
      case LangPackage.ALIAS_RULE__TYPE_ALIAS:
        return TYPE_ALIAS_EDEFAULT == null ? typeAlias != null : !TYPE_ALIAS_EDEFAULT.equals(typeAlias);
      case LangPackage.ALIAS_RULE__SIZE:
        return size != SIZE_EDEFAULT;
      case LangPackage.ALIAS_RULE__VARIABLE_SIZE:
        return variableSize != VARIABLE_SIZE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (typeAlias: ");
    result.append(typeAlias);
    result.append(", size: ");
    result.append(size);
    result.append(", variableSize: ");
    result.append(variableSize);
    result.append(')');
    return result.toString();
  }

} //AliasRuleImpl
